# Solicita ao usuário que insira dois números
numero1 <- as.numeric(readline(prompt = "Digite o primeiro número: "))
# Calcula a soma dos números
soma <- numero1 + numero2
numero1 <- as.numeric(readline(prompt = "Digite o primeiro número: "))
# Calcula a soma dos números
soma <- numero1 + numero2
ero1 <- as.numeric(readline(prompt = "Digite o primeiro número: "))
# Calcula a soma dos números
soma <- numero1 + numero2
numero1 <- as.numeric(readline(prompt = "Digite o primeiro número: "))
# Exibe o resultado
cat("A soma de", numero1, "e", numero2, "é", soma, "\n")
cat("Opa!")
cat("Opa!")
# operações básicas
2+2
2*5 # 10
12/2
7-2 # = 5
# operações básicas
2 + 2 # = 4
6 / 2 # = 3
2 * 5 # = 10
2**3 # = 8 (potenciação)
2^3 # = 8 (2ª forma - potenciação)
clear
x <- 123 * 98
x
123 * 98
x <- 5
x
y
y
y <- x + 1
x + 1 -> y
y
x <- 5 * 2
x + 1 -> y
y
x <- 5 * 2 # atribuindo ao objeto x o valor 5 * 2 = 10
class(x)
word <- "palavra"
class(word) # diz o tipo do objeto
bool <- TRUE
class(bool) # diz o tipo do objeto
TRUE + TRUE
TRUE + FALSE
FALSE + FALSE
FALSE + TRUE
vet <- c(1, 2, 3)
vet
vet <- c(1,2,3)
vet
vet2 <- c(TRUE, FALSE)
vet2
vet1 + vet2
vet1 <- c(1, 2, 3)
vet2 <- c(TRUE, FALSE)
vet1 + vet2
vet1 + vet3
vet1 <- c(1, 2, 3)
vet3 <- c(4, 5, 6)
vet1 + vet3
vet1 <- c(1, 2, 3)
vet1[1]
vet1 <- c(1, 2, 3)
vet1[0]
vet3 <- c(4, 5, 6)
vet3[3] # 6
vet3 <- c(4, 5, 6)
vet3[c(2,3)] # 5, 6
vet2 <- c(TRUE, FALSE)
vet3 <- c(4, 5, 6)
vet1 + vet2 # vetores de tamanho difentes: comprimento do objeto maior não é                   múltiplo do comprimento do objeto menor. O R soma o primeiro                     elemento do vet1 com o elemento do vet2, depois soma o segundo do                vet1 com o segundo do vet2, como o vet1 tem mais um elemento o R                 pega o primeiro elemento do vet2 novamente e soma com o último                   elemento do vet1, se o vet1 tivesse um quarto elemento o R somaria               esse quarto elemento com o segundo elemento do vet2
vet1 <- c(1, 2, 3)
sum(vet1 < 30)
sum(vet1 < 2)
vetTest <- c(TRUE, FALSE, TRUE)
sum(vetTest)
vetTest <- c(TRUE, FALSE, TRUE)
sum(vetTest < 2)
sum(vet1)
dado1 <- sample(x = 1:6, size = 10000, replace = TRUE)
dado1
dado2 <- sample(x = 1:6, size = 10000, replace = TRUE)
dado2
sum(dado1 == 3) # Quantas vezes o lançamento do dado1 saiu o número3
test <- sample(x = 1:100, size = 100)
mean(test)
test <- sample(x = 1:100, size = 100)
mean(test)
test <- sample(x = 1:100, size = 100)
mean(test == 1)
soma <- dado1 + dado2
soma
sum(soma == 3)
mean(soma == 3)
2+2
clear
?c
for(i in 1:20) {
x <- x + i
}
x
print(x)
aniversarios <- sample(x = 1:365, size = 10, replace = TRUE)
aniversarios
duplicated(aniversarios) # VERIFICA SE TEM VALORES DUPLICADOS NO VETOR
any(duplicated(aniversarios))
resultado <- c() # VETOR VAZIO
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
resultados <- c() # VETOR VAZIO
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
mean(result)
mean(resultados)
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = 10, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
calculo_probabilidade <- function(n) {
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = n, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
}
calculo_probabilidade(10)
probabilidade_aniversario <- function(n) {
for(j in 1:10000) {
aniversarios <- sample(x = 1:365, size = n, replace = T)
resultados[j] <- any(duplicated(aniversarios))
}
mean(resultados)
}
probabilidade_aniversario(70)
?plot
bilhete <- c(4, 5, 12, 43, 21, 34) # SIMULA UM BILHETE
semanas <- 0 # QTD DE SEMANAS
acertos <- 0 # QTD DE ACERTOS
while(acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
acertos
semanas
semanas/52
semanas/52
semanas/52
bilhete <- c(4, 5, 12, 43, 21, 34) # SIMULA UM BILHETE
semanas <- 0 # QTD DE SEMANAS
acertos <- 0 # QTD DE ACERTOS
while(acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas/52
bilhete <- c(4, 5, 12, 43, 21, 34) # SIMULA UM BILHETE
semanas <- 0 # QTD DE SEMANAS
acertos <- 0 # QTD DE ACERTOS
while(acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas/52
bilhete <- c(4, 5, 12, 43, 21, 34) # SIMULA UM BILHETE
semanas <- 0 # QTD DE SEMANAS
acertos <- 0 # QTD DE ACERTOS
while(acertos < 4) {
sorteio <- sample(x = 1:60, size = 6, replace = FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
semanas/52
install.packages("palmerpenguins")
install.packages("palmerpenguins")
library(palmerpenguins)
penguins
setwd("C:/Users/marce/OneDrive/Área de Trabalho/R")
# (a) (10, 11, 12,…, 30)
a <- c(10, ..., 30)
# (a) (10, 11, 12,…, 30)
a <- c(10...30)
# (a) (10, 11, 12,…, 30)
a <- c(10,...30)
# (a) (10, 11, 12,…, 30)
a <- c(10, 11, 12,..., 30)
# (a) (10, 11, 12,…, 30)
a <- 10:30
a
# (a) (10, 11, 12,…, 30)
a <- seq(10,30)
a
# (b) (30, 29, 28,…, 10)
b <- seq(30, 10, by = -1)
b
# (c) (10, 11, 12,…, 30, 29, 28,…, 10)
c <- vetor <- c(10:30, 30:10)
c
# (c) (10, 11, 12,…, 30, 29, 28,…, 10)
c <- vetor <- c(seq(10,30), seq(30, 10, by = -1))
c
?rep
vet1 <- seq(2, 8, by = 2)
vet1
vet2 <- rep(vet1, 10)
vet2
vet1 <- seq(2, 8, by = 2)
vet2 <- rep(vet1, times = 10)
vet2
vet2
vet3 <- vet2[seq(1, 38)]
vet3
vet3 <- vet2[seq(1, 37)]
vet3
vet3 <- rep(vet2, times = 11)
vet3
vet3 <- rep(vet1, times = 11)
vet3
vet3 <- rep(vet1, times = 11)
vet4 <- vet3[seq(1, 42)]
vet4
vet3 <- rep(vet1, times = 11)
vet4 <- vet3[seq(1, 41)]
vet4
?sum
# (a)
n <- 20:30
resultado_a <- sum(n^2 + 4*n)
resultado_a
# (a)
n1 <- seq(20^2 + 4*20, 30^2 + 4*30)
r1 <- sum(n1)
r1
# (a)
n1 <- seq(20^2 + 4*20, 30^2 + 4*30, by = 1)
r1 <- sum(n1)
r1
# (a)
n1 <- seq((20^2) + (4*20), (30^2) + (4*30), by = 1)
r1 <- sum(n1)
r1
# (a)
n1 <- seq(20, 30)
r1 <- sum(n1^2 + 4*n1)
r1
?seq
# (a)
a <- seq(10, 30, by = 1)
a
# (c)
c <- vetor <- c(seq(10, 30, by = 1), seq(30, 10, by = -1))
c
# (a)
n1 <- seq(20, 30, by = 1)
r1 <- sum(n1^2 + 4*n1)
r1
# (b)
n2 <- seq(10, 20, by = 1)
r2 <- sum((3*n2)/n2 + (2*n2)/(n2^2))
r2
# (b)
n2 <- seq(10, 20, by = 1)
r2 <- sum((3^n2)/n2 + (2^n2)/(n2^2))
r2
