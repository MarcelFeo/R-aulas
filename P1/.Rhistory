# Atualiza os três últimos lançamentos
ultimos <- c(ultimos[2:3], lancamento)
# Verifica se já temos três lançamentos válidos (não NA)
if (!any(is.na(ultimos))) {
# Se Steven venceu
if (all(ultimos == steven)) {
print("steven")
break
}
# Se Garnit venceu
if (all(ultimos == garnit)) {
print("garnit")
break
}
}
}
for (i in 1:10000) {
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
ultimos <- c(NA, NA, NA)
while (TRUE) {
lancamento <- sample(x = 0:1, size = 1) # 0 = coroa e 1 = cara
# Atualiza os três últimos lançamentos
ultimos <- c(ultimos[2:3], lancamento)
if (!any(is.na(ultimos))) {
if (all(ultimos == steven)) {
print("steven")
break
}
if (all(ultimos == garnit)) {
vitoria_garnit <- vitoria_garnit + 1
print("garnit")
break
}
}
}
}
vitoria_garnit <- 0
for (i in 1:10000) {
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
ultimos <- c(NA, NA, NA)
while (TRUE) {
lancamento <- sample(x = 0:1, size = 1) # 0 = coroa e 1 = cara
# Atualiza os três últimos lançamentos
ultimos <- c(ultimos[2:3], lancamento)
if (!any(is.na(ultimos))) {
if (all(ultimos == steven)) {
print("steven")
break
}
if (all(ultimos == garnit)) {
vitoria_garnit <- vitoria_garnit + 1
print("garnit")
break
}
}
}
}
media_vitoria <- vitoria_garnit / 10000
media_vitoria
baralho <- c()
# Colocando as cartas no baralho
for(i in 1:52) {
if (i < 14) {
baralho[i] <- "azul"
} else if (i >= 14 & i <= 26) {
baralho[i] <- "vermelha"
} else if (i >= 26 & i <= 39) {
baralho[i] <- "branca"
} else if (i >= 39 & i <= 52) {
baralho[i] <- "marrom"
}
}
baralho
carta <- sample(baralho, 1)
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 1)
carta
carta <- sample(baralho, 3)
carta
carta <- sample(baralho, 3)
carta
carta <- sample(baralho, 3)
carta
carta <- sample(baralho, 3)
carta
carta <- sample(baralho, 3)
carta
baralho <- c()
# Colocando as cartas no baralho
for(i in 1:52) {
if (i < 14) {
baralho[i] <- "azul"
} else if (i >= 14 & i <= 26) {
baralho[i] <- "vermelha"
} else if (i >= 26 & i <= 39) {
baralho[i] <- "branca"
} else if (i >= 39 & i <= 52) {
baralho[i] <- "marrom"
}
}
qtd_azuis <- sum(baralho == "azul")
qtd_azuis
baralho <- c()
resultado <- c()
# Colocando as cartas no baralho
for(i in 1:52) {
if (i < 14) {
baralho[i] <- "azul"
} else if (i >= 14 & i <= 26) {
baralho[i] <- "vermelha"
} else if (i >= 26 & i <= 39) {
baralho[i] <- "branca"
} else if (i >= 39 & i <= 52) {
baralho[i] <- "marrom"
}
}
# letra (a)
for (i in 100000) {
cartas <- sample(baralho, 3)
qtd_azuis <- sum(cartas == "azul")
if (qtd_azuis == 2) {
resultado[i] <- 1
} else {
resultado[i] <- 0
}
}
mean(resultado)
baralho <- c()
resultado <- c()
# Colocando as cartas no baralho
gerar_baralho <- function() {
for(i in 1:52) {
if (i < 14) {
baralho[i] <- "azul"
} else if (i >= 14 & i <= 26) {
baralho[i] <- "vermelha"
} else if (i >= 26 & i <= 39) {
baralho[i] <- "branca"
} else if (i >= 39 & i <= 52) {
baralho[i] <- "marrom"
}
}
}
# letra (a)
limite <- 52
for (i in 100000) {
if (limite == i) {
gerar_baralho()
} else {
cartas <- sample(baralho, 3)
qtd_azuis <- sum(cartas == "azul")
if (qtd_azuis == 2) {
resultado[i] <- 1
} else {
resultado[i] <- 0
}
}
}
baralho <- c()
baralho <- c()
resultado <- c()
# Colocando as cartas no baralho
gerar_baralho <- function() {
for(i in 1:52) {
if (i < 14) {
baralho[i] <- "azul"
} else if (i >= 14 & i <= 26) {
baralho[i] <- "vermelha"
} else if (i >= 26 & i <= 39) {
baralho[i] <- "branca"
} else if (i >= 39 & i <= 52) {
baralho[i] <- "marrom"
}
}
}
# letra (a)
for (i in 100000) {
gerar_baralho()
cartas <- sample(baralho, 3)
qtd_azuis <- sum(cartas == "azul")
if (qtd_azuis == 2) {
resultado[i] <- 1
} else {
resultado[i] <- 0
}
}
resultado <- c()
# Colocando as cartas no baralho
gerar_baralho <- function() {
baralho <- c()
for(i in 1:52) {
if (i < 14) {
baralho[i] <- "azul"
} else if (i >= 14 & i <= 26) {
baralho[i] <- "vermelha"
} else if (i >= 26 & i <= 39) {
baralho[i] <- "branca"
} else if (i >= 39 & i <= 52) {
baralho[i] <- "marrom"
}
}
return(baralho)
}
# letra (a)
for (i in 100000) {
baralho <- gerar_baralho()
cartas <- sample(baralho, 3)
qtd_azuis <- sum(cartas == "azul")
if (qtd_azuis == 2) {
resultado[i] <- 1
} else {
resultado[i] <- 0
}
}
mean(resultado)
resultado <- c()
# Colocando as cartas no baralho
gerar_baralho <- function() {
baralho <- c()
for(i in 1:52) {
if (i < 14) {
baralho[i] <- "azul"
} else if (i >= 14 & i <= 26) {
baralho[i] <- "vermelha"
} else if (i >= 26 & i <= 39) {
baralho[i] <- "branca"
} else if (i >= 39 & i <= 52) {
baralho[i] <- "marrom"
}
}
return(baralho)
}
# letra (a)
for (i in 1:100000) {
baralho <- gerar_baralho()
cartas <- sample(baralho, 3)
qtd_azuis <- sum(cartas == "azul")
if (qtd_azuis == 2) {
resultado[i] <- 1
} else {
resultado[i] <- 0
}
}
mean(resultado)
experimentoa <- function(n) {
for (i in 1:n) {
baralho <- gerar_baralho()
cartas <- sample(baralho, 3)
qtd_azuis <- sum(cartas == "azul")
if (qtd_azuis == 2) {
resultado[i] <- 1
} else {
resultado[i] <- 0
}
}
}
experimentoa(10000)
experimentoa <- function(n) {
resultado <- c()
for (i in 1:n) {
baralho <- gerar_baralho()
cartas <- sample(baralho, 3)
qtd_azuis <- sum(cartas == "azul")
if (qtd_azuis == 2) {
resultado[i] <- 1
} else {
resultado[i] <- 0
}
}
return(mean(resultado))
}
x <- experimentoa(10000)
x
qtd_sorteio <- 0
total <- 0
baralhob <- c(1:52)
while(qtd_sorteio < 4) {
sorteio <- sample(baralhob, 1, replace = TRUE)
# Número 7 <- carta azul, Número 20 <- carta vermelha, Núemero 33 <- carta branca, Número 46 <- marrom
if (sorteio == 7 | sorteio == 20 | sorteio == 33 | sorteio == 46) {
qtd_sorteio <- qtd_sorteio + 1
}
total <- total + 1
}
total
qtd_sorteio
resultadosb <- c()
for (i in 1:100000) {
qtd_sorteio <- 0
total <- 0
baralhob <- c(1:52)
while(qtd_sorteio < 4) {
sorteio <- sample(baralhob, 1, replace = TRUE)
# Número 7 <- carta azul, Número 20 <- carta vermelha, Núemero 33 <- carta branca, Número 46 <- marrom
if (sorteio == 7 | sorteio == 20 | sorteio == 33 | sorteio == 46) {
qtd_sorteio <- qtd_sorteio + 1
}
total <- total + 1
}
resultadosb[i] <- total
}
mean(resultadosb)
setwd("C:/Users/marce/OneDrive/Área de Trabalho/R/P1")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library(ggplot2)
dados <- read.table("churn.txt", sep = ";", header = TRUE)
View(dados)
summary(dados)
dados <- read.table("churn.txt", sep = ";", header = TRUE)
dados <- dados[, -1]
View(dados)
dados <- read.table("churn.txt", sep = ";", header = TRUE)
dados <- dados[, -1]
dados$Geography <- as.factor(dados$Geography)
dados$Gender <- as.factor(dados$Gender)
View(dados)
dados <- read.table("churn.txt", sep = ";", header = TRUE)
dados <- dados[, -1]
dados$Surname <- as.factor(dados$Surname)
dados$Geography <- as.factor(dados$Geography)
dados$Gender <- as.factor(dados$Gender)
View(dados)
dados <- dados[sample(nrow(dados)), ] # mistura os valores no vetor
n <- round(0.75*nrow(dados)) # pega 75% do vetor
treino <- dados[1:n,] # treinamento (80%)
teste <- dados[-(1:n),] # teste (20%)
View(treino)
View(teste)
library(rpart)
library(rpart.plot)
library(rpart)
library(rpart.plot)
modelo.arvore <- rpart(formula = CreditScore,Tenure,Balance~ ., data = treino, method = "class")
modelo.arvore <- rpart(formula = ~ ., data = treino, method = "class")
rpart.plot(modelo.arvore, extra = 101)
modelo.arvore <- rpart(formula = ~ ., data = treino, method = "class")
modelo.arvore <- rpart(formula = Exited~ ., data = treino, method = "class")
rpart.plot(modelo.arvore, extra = 101)
rpart.plot(modelo.arvore, extra = 1)
modelo.arvore <- rpart(formula = Exited~ ., data = treino, method = "class")
rpart.plot(modelo.arvore, extra = 3)
modelo.arvore <- rpart(formula = Exited~ ., data = treino, method = "class")
rpart.plot(modelo.arvore, extra = 101, cex = 0.8)
modelo.arvore <- rpart(formula = Exited~ ., data = treino, method = "class")
previsao = predict(modelo.arvore, newdata = teste, type = "class")
mean(previsao == teste$Exited)
mean(previsao == teste$Exited)
dados <- read.table("churn.txt", sep = ";", header = TRUE)
dados <- dados[, -1]
dados <- dados[,-2]
View(dados)
summary(dados)
dados <- read.table("churn.txt", sep = ";", header = TRUE)
dados <- dados[, -1]
dados <- dados[, -2]
dados <- dados[, -3]
View(dados)
dados <- read.table("churn.txt", sep = ";", header = TRUE)
dados <- dados[, -1]
dados <- dados[, -2]
View(dados)
dados <- dados[, -3]
View(dados)
dados <- read.table("churn.txt", sep = ";", header = TRUE)
dados <- dados[, -1]
View(dados)
dados <- dados[, -1]
View(dados)
dados <- dados[, -1]
View(dados)
dados <- dados[sample(nrow(dados)), ] # mistura os valores no vetor
n <- round(0.75*nrow(dados)) # pega 75% do vetor
treino <- dados[1:n,] # treinamento (80%)
teste <- dados[-(1:n),] # teste (20%)
modelo.arvore <- rpart(formula = Exited~ ., data = treino, method = "class")
rpart.plot(modelo.arvore, extra = 101)
previsao = predict(modelo.arvore, newdata = teste, type = "class")
mean(previsao == teste$Exited)
matriz <- confusionMatrix(previsao, teste$Exited)
library(caret)
library(caret)
matriz <- confusionMatrix(previsao, teste$Exited)
previsao = predict(modelo.arvore, newdata = teste, type = "class")
mean(previsao == teste$Exited)
matriz <- confusionMatrix(previsao, teste$Exited)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(caret)
matriz <- confusionMatrix(previsao, teste$Exited)
matriz
rpart.plot(modelo.arvore, type = 2, extra = 104, fallen.leaves = TRUE)
modelo.arvore <- rpart(formula = Exited~ ., data = treino, method = "class")
rpart.plot(modelo.arvore, type = 2, extra = 104, fallen.leaves = TRUE)
modelo.arvore <- rpart(formula = Exited~ ., data = treino, method = "class")
rpart.plot(modelo.arvore, type = 2, extra = 104, fallen.leaves = TRUE)
modelo.arvore <- rpart(formula = Exited~ ., data = treino, method = "class")
rpart.plot(modelo.arvore, type = 2, extra = 104, fallen.leaves = TRUE)
matriz <- confusionMatrix(previsao, teste$Exited)
matriz_confusao <- table(Previsão = previsao, Real = teste$Exited)
matriz_confusao
todos_dados <- read.table("churn.txt", sep = ";", header = TRUE)
summary(todos_dados)
todos_dados$Geography
unique(todos_dados$Geography)
cliente_franca <- subset(todos_dados, Geography == "France")
cliente_franca <- cliente_franca[sample(nrow(cliente_franca)), ]
n <- round(0.75*nrow(dados)) # pega 75% do vetor
treino <- dados[1:n,] # treinamento (80%)
teste <- dados[-(1:n),] # teste (20%)
modelo.arvore <- rpart(formula = Exited~ ., data = treino, method = "class")
rpart.plot(modelo.arvore, type = 2, extra = 104, fallen.leaves = TRUE)
previsao = predict(modelo.arvore, newdata = teste, type = "class")
mean(previsao == teste$Exited)
matriz <- confusionMatrix(previsao, teste$Exited)
cliente_franca <- cliente_franca[sample(nrow(cliente_franca)), ]
n <- round(0.75*nrow(dados)) # pega 75% do vetor
treino <- dados[1:n,] # treinamento (75%)
teste <- dados[-(1:n),] # teste (20%)
modelo.arvore <- rpart(formula = Exited~ ., data = treino, method = "class")
rpart.plot(modelo.arvore, type = 2, extra = 104, fallen.leaves = TRUE)
previsao = predict(modelo.arvore, newdata = teste, type = "class")
mean(previsao == teste$Exited)
matriz <- confusionMatrix(previsao, teste$Exited)
todos_dados <- read.table("churn.txt", sep = ";", header = TRUE)
cliente_franca <- subset(todos_dados, Geography == "France")
cliente_spain <- subset(todos_dados, Geography == "Spain")
cliente_germany <- subset(todos_dados, Geography == "Germany")
treino_do_modelo <- function(data, pais) {
todos_dados <- todos_dados[sample(nrow(dados)), ] # mistura os valores no vetor
n <- round(0.75*nrow(dados)) # pega 75% do vetor
treino <- dados[1:n,] # treinamento (75%)
teste <- dados[-(1:n),] # teste (20%)
modelo_arvore <- rpart(Exited ~ ., data = treino, method = "class")
previsao <- predict(modelo_arvore, teste, type = "class")
matriz <- confusionMatrix(previsao, teste$Exited)
accuracy <- conf_matrix$overall["Accuracy"]
print(paste("Acurácia para", pais, ": ", round(accuracy, 4)))
# Plotar a árvore de decisão
rpart.plot(tree_model, type = 2, extra = 104, fallen.leaves = TRUE, main = paste("Árvore de Decisão -", pais))
return(accuracy)
}
# Acurácias
franca <- treino_do_modelo(cliente_franca, "França")
todos_dados <- read.table("churn.txt", sep = ";", header = TRUE)
cliente_franca <- subset(todos_dados, Geography == "France")
cliente_spain <- subset(todos_dados, Geography == "Spain")
cliente_germany <- subset(todos_dados, Geography == "Germany")
treino_do_modelo <- function(data, pais) {
todos_dados <- todos_dados[sample(nrow(todos_dados)), ] # mistura os valores no vetor
n <- round(0.75*nrow(todos_dados)) # pega 75% do vetor
treino <- todos_dados[1:n,] # treinamento (75%)
teste <- todos_dados[-(1:n),] # teste (20%)
modelo_arvore <- rpart(Exited ~ ., data = treino, method = "class")
rpart.plot(modelo.arvore, type = 2, extra = 104, fallen.leaves = TRUE)
previsao <- predict(modelo_arvore, teste, type = "class")
matriz <- confusionMatrix(previsao, teste$Exited)
accuracy <- matriz$overall["Accuracy"]
print(paste("Acurácia de ", pais, " = ", round(accuracy, 4)))
return(accuracy)
}
# Acurácias
franca <- treino_do_modelo(cliente_franca, "França")
todos_dados <- read.table("churn.txt", sep = ";", header = TRUE)
cliente_franca <- subset(todos_dados, Geography == "France")
cliente_spain <- subset(todos_dados, Geography == "Spain")
cliente_germany <- subset(todos_dados, Geography == "Germany")
treino_do_modelo <- function(data, pais) {
todos_dados <- todos_dados[sample(nrow(todos_dados)), ] # mistura os valores no vetor
todos_dados <- todos_dados[, -1]
todos_dados <- todos_dados[, -1]
todos_dados <- todos_dados[, -1]
n <- round(0.75*nrow(todos_dados)) # pega 75% do vetor
treino <- todos_dados[1:n,] # treinamento (75%)
teste <- todos_dados[-(1:n),] # teste (20%)
modelo_arvore <- rpart(Exited ~ ., data = treino, method = "class")
rpart.plot(modelo.arvore, type = 2, extra = 104, fallen.leaves = TRUE)
previsao <- predict(modelo_arvore, teste, type = "class")
matriz <- confusionMatrix(previsao, teste$Exited)
accuracy <- matriz$overall["Accuracy"]
print(paste("Acurácia de ", pais, " = ", round(accuracy, 4)))
return(accuracy)
}
# Acurácias
franca <- treino_do_modelo(cliente_franca, "França")
