---
title: "Aula 06 - Classificação de Penguins"
author: "Marcel Féo"
lang: "pt"
date: 2024-08-23
format: html
editor: visual
---

## Objetivos desse tutorial

O objetivo desse tutorial é escrever um modelo de classificação que seja capaz de prever a espécie de um penguin a partir de seu peso, tamanho da asa, tamanho do bico e profundidade do bico. Para isso, contruiremos do zero um modelo KNN.

## Lendo o conjunto

Vamos iniciar nosso trabalho lendo o pacote `palmerpenguins` e salvando o conjunto em um objeto chamado `penguins`.

```{r}
library(palmerpenguins) # lendo o pacote

pinguins <- penguins

str(pinguins)

```

A seguir, vamos imprimir um resumo estatistico de cada uma das variáveis dos dados

```{r}
summary(pinguins)
```

A partir do resumos das variáveis, identificamos alguns valores faltantes. Vamos removê-los.

```{r}
pinguins <- na.omit(pinguins)
summary(pinguins)
```

## Dividindo em treino e teste

```{r}
pinguins <- pinguins[sample(nrow(pinguins)), ] # mistura os valores no vetor

n <- round(0.8*nrow(pinguins)) # pega 80% do vetor

treino <- pinguins[1:n,] # treinamento (80%)
teste <- pinguins[-(1:n),] # teste (20%)

```

## Visualização de dados

Vamos identificar padrões no conjunto de treinamento para construírmos nosso modelo.

### Gráfico Boxplot

```{r}
library(ggplot2)

ggplot(treino, aes(x = species, y = flipper_length_mm)) +
  geom_boxplot() +
  theme_bw()

```

### Gráfico de Pontos

```{r}
library(ggplot2)

ggplot(treino, aes(x = body_mass_g, y = bill_length_mm, col = species)) +
  geom_point() +
  theme_bw()

```

## Classificando o primeiro do teste

```{r}

distancias = c()

for(i in 1:nrow(treino)) {
  distancias[i] <- sqrt((teste$body_mass_g[1] - treino$body_mass_g[i])^2 + (teste$bill_length_mm[1] - treino$bill_length_mm[i])^2)
}

treino$species[order(distancias)[1]] # posição da menor distancia
teste$species[1]
```

```{r}

classificacao <- c()

for(i in 1:nrow(teste)) {
  distancias <- c()
  
  for(j in 1:nrow(treino)) {
    distancias[j] <- sqrt((teste$body_mass_g[i] - treino$body_mass_g[j])^2 + (teste$bill_length_mm[i] - treino$bill_length_mm[j])^2)
  }
  
  classificacao[i] <- as.character(treino$species[order(distancias)[1]])
}

```

### Taxa de acerto

```{r}
mean(classificacao == teste$species)

```
