# Atualiza os três últimos lançamentos
ultimo1 <- ultimo2
ultimo2 <- ultimo3
ultimo3 <- lancamento
# Verifica se já temos três lançamentos válidos (não NA)
if (!is.na(ultimo1)) {
# Se Steven venceu
if (all(c(ultimo1, ultimo2, ultimo3) == steven)) {
print("steven")
break
}
# Se Garnit venceu
if (all(c(ultimo1, ultimo2, ultimo3) == garnit)) {
print("garnit")
break
}
}
}
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
# Inicializa os três últimos lançamentos
ultimo1 <- NA
ultimo2 <- NA
ultimo3 <- NA
# Lançar a moeda até alguém vencer
while (TRUE) {
# Lança a moeda (0 = coroa, 1 = cara)
lancamento <- sample(c(0, 1), 1)
# Atualiza os três últimos lançamentos
ultimo1 <- ultimo2
ultimo2 <- ultimo3
ultimo3 <- lancamento
# Verifica se já temos três lançamentos válidos (não NA)
if (!is.na(ultimo1)) {
# Se Steven venceu
if (all(c(ultimo1, ultimo2, ultimo3) == steven)) {
print("steven")
break
}
# Se Garnit venceu
if (all(c(ultimo1, ultimo2, ultimo3) == garnit)) {
print("garnit")
break
}
}
}
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
# Inicializa os três últimos lançamentos
ultimo1 <- NA
ultimo2 <- NA
ultimo3 <- NA
# Lançar a moeda até alguém vencer
while (TRUE) {
# Lança a moeda (0 = coroa, 1 = cara)
lancamento <- sample(c(0, 1), 1)
# Atualiza os três últimos lançamentos
ultimo1 <- ultimo2
ultimo2 <- ultimo3
ultimo3 <- lancamento
# Verifica se já temos três lançamentos válidos (não NA)
if (!is.na(ultimo1)) {
# Se Steven venceu
if (all(c(ultimo1, ultimo2, ultimo3) == steven)) {
print("steven")
break
}
# Se Garnit venceu
if (all(c(ultimo1, ultimo2, ultimo3) == garnit)) {
print("garnit")
break
}
}
}
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
# Inicializa os três últimos lançamentos
ultimo1 <- NA
ultimo2 <- NA
ultimo3 <- NA
# Lançar a moeda até alguém vencer
while (TRUE) {
# Lança a moeda (0 = coroa, 1 = cara)
lancamento <- sample(c(0, 1), 1)
# Atualiza os três últimos lançamentos
ultimo1 <- ultimo2
ultimo2 <- ultimo3
ultimo3 <- lancamento
# Verifica se já temos três lançamentos válidos (não NA)
if (!is.na(ultimo1)) {
# Se Steven venceu
if (all(c(ultimo1, ultimo2, ultimo3) == steven)) {
print("steven")
break
}
# Se Garnit venceu
if (all(c(ultimo1, ultimo2, ultimo3) == garnit)) {
print("garnit")
break
}
}
}
sample(c(0, 1), 1)
sample(c(0, 1), 1)
sample(c(0, 1), 1)
sample(c(0, 1), 1)
sample(c(0, 1), 1)
sample(c(0, 1), 1)
sample(x = 0:1, size = 1)
sample(x = 0:1, size = 1)
sample(x = 0:1, size = 1)
sample(x = 0:1, size = 1)
sample(x = 0:1, size = 1)
sample(x = 0:1, size = 1)
sample(x = 0:1, size = 1)
a <- c(1,1)
b <- c(1,1)
c <- c(0,1)
d <- c(1,0)
a
all(a == b)
all(a == c)
a == c
# Sequências de Steven e Garnit
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
# Inicializa o vetor com os três últimos lançamentos
ultimos <- c(NA, NA, NA)
# Lançar a moeda até alguém vencer
while (TRUE) {
# Lança a moeda (0 = coroa, 1 = cara)
lancamento <- sample(x = 0:1, size = 1)
# Atualiza os três últimos lançamentos
ultimos <- c(ultimos[2:3], lancamento)
# Verifica se já temos três lançamentos válidos (não NA)
if (!any(is.na(ultimos))) {
# Se Steven venceu
if (all(ultimos == steven)) {
print("steven")
break
}
# Se Garnit venceu
if (all(ultimos == garnit)) {
print("garnit")
break
}
}
}
# Sequências de Steven e Garnit
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
# Inicializa o vetor com os três últimos lançamentos
ultimos <- c(NA, NA, NA)
# Lançar a moeda até alguém vencer
while (TRUE) {
# Lança a moeda (0 = coroa, 1 = cara)
lancamento <- sample(x = 0:1, size = 1)
# Atualiza os três últimos lançamentos
ultimos <- c(ultimos[2:3], lancamento)
# Verifica se já temos três lançamentos válidos (não NA)
if (!any(is.na(ultimos))) {
# Se Steven venceu
if (all(ultimos == steven)) {
print("steven")
break
}
# Se Garnit venceu
if (all(ultimos == garnit)) {
print("garnit")
break
}
}
}
# Sequências de Steven e Garnit
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
# Inicializa o vetor com os três últimos lançamentos
ultimos <- c(NA, NA, NA)
# Lançar a moeda até alguém vencer
while (TRUE) {
# Lança a moeda (0 = coroa, 1 = cara)
lancamento <- sample(x = 0:1, size = 1)
# Atualiza os três últimos lançamentos
ultimos <- c(ultimos[2:3], lancamento)
# Verifica se já temos três lançamentos válidos (não NA)
if (!any(is.na(ultimos))) {
# Se Steven venceu
if (all(ultimos == steven)) {
print("steven")
break
}
# Se Garnit venceu
if (all(ultimos == garnit)) {
print("garnit")
break
}
}
}
# Sequências de Steven e Garnit
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
# Inicializa o vetor com os três últimos lançamentos
ultimos <- c(NA, NA, NA)
# Lançar a moeda até alguém vencer
while (TRUE) {
# Lança a moeda (0 = coroa, 1 = cara)
lancamento <- sample(x = 0:1, size = 1)
# Atualiza os três últimos lançamentos
ultimos <- c(ultimos[2:3], lancamento)
# Verifica se já temos três lançamentos válidos (não NA)
if (!any(is.na(ultimos))) {
# Se Steven venceu
if (all(ultimos == steven)) {
print("steven")
break
}
# Se Garnit venceu
if (all(ultimos == garnit)) {
print("garnit")
break
}
}
}
# Sequências de Steven e Garnit
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
# Inicializa o vetor com os três últimos lançamentos
ultimos <- c(NA, NA, NA)
# Lançar a moeda até alguém vencer
while (TRUE) {
# Lança a moeda (0 = coroa, 1 = cara)
lancamento <- sample(x = 0:1, size = 1)
# Atualiza os três últimos lançamentos
ultimos <- c(ultimos[2:3], lancamento)
# Verifica se já temos três lançamentos válidos (não NA)
if (!any(is.na(ultimos))) {
# Se Steven venceu
if (all(ultimos == steven)) {
print("steven")
break
}
# Se Garnit venceu
if (all(ultimos == garnit)) {
print("garnit")
break
}
}
}
# Sequências de Steven e Garnit
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
# Inicializa o vetor com os três últimos lançamentos
ultimos <- c(NA, NA, NA)
# Lançar a moeda até alguém vencer
while (TRUE) {
# Lança a moeda (0 = coroa, 1 = cara)
lancamento <- sample(x = 0:1, size = 1)
# Atualiza os três últimos lançamentos
ultimos <- c(ultimos[2:3], lancamento)
# Verifica se já temos três lançamentos válidos (não NA)
if (!any(is.na(ultimos))) {
# Se Steven venceu
if (all(ultimos == steven)) {
print("steven")
break
}
# Se Garnit venceu
if (all(ultimos == garnit)) {
print("garnit")
break
}
}
}
# Sequências de Steven e Garnit
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
# Inicializa o vetor com os três últimos lançamentos
ultimos <- c(NA, NA, NA)
# Lançar a moeda até alguém vencer
while (TRUE) {
# Lança a moeda (0 = coroa, 1 = cara)
lancamento <- sample(x = 0:1, size = 1)
# Atualiza os três últimos lançamentos
ultimos <- c(ultimos[2:3], lancamento)
# Verifica se já temos três lançamentos válidos (não NA)
if (!any(is.na(ultimos))) {
# Se Steven venceu
if (all(ultimos == steven)) {
print("steven")
break
}
# Se Garnit venceu
if (all(ultimos == garnit)) {
print("garnit")
break
}
}
}
for (i in 1:10000) {
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
ultimos <- c(NA, NA, NA)
while (TRUE) {
lancamento <- sample(x = 0:1, size = 1) # 0 = coroa e 1 = cara
# Atualiza os três últimos lançamentos
ultimos <- c(ultimos[2:3], lancamento)
if (!any(is.na(ultimos))) {
if (all(ultimos == steven)) {
print("steven")
break
}
if (all(ultimos == garnit)) {
vitoria_garnit <- vitoria_garnit + 1
print("garnit")
break
}
}
}
}
vitoria_garnit <- 0
for (i in 1:10000) {
steven <- c(0, 1, 0)
garnit <- c(0, 0, 1)
ultimos <- c(NA, NA, NA)
while (TRUE) {
lancamento <- sample(x = 0:1, size = 1) # 0 = coroa e 1 = cara
# Atualiza os três últimos lançamentos
ultimos <- c(ultimos[2:3], lancamento)
if (!any(is.na(ultimos))) {
if (all(ultimos == steven)) {
print("steven")
break
}
if (all(ultimos == garnit)) {
vitoria_garnit <- vitoria_garnit + 1
print("garnit")
break
}
}
}
}
media_vitoria <- vitoria_garnit / 10000
media_vitoria
chicago <- read.csv("chicago.csv", TRUE)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
chicago <- read.csv("chicago.csv", TRUE)
setwd("C:/Users/marce/OneDrive/Área de Trabalho/R")
chicago <- read.csv("chicago.csv", TRUE)
chicago <- read.csv("chicago.csv", TRUE)
chicago <- read.csv("chicago.csv", TRUE)
chicago <- read.csv("chicago.csv", TRUE)
setwd("C:/Users/marce/OneDrive/Área de Trabalho/R/Revisão P1")
chicago <- read.csv("chicago.csv", TRUE)
chicago <- chicago[, -1]
chicago$season <- as.factor(chicago$season)
View(chicago)
?filter
View(chicago)
ano_1997 <- chicago[chicago$year == 1997]
chicago <- read.csv("chicago.csv", TRUE)
chicago <- chicago[, -1]
chicago$season <- as.factor(chicago$season)
ano_1997 <- chicago[chicago$year == "1997"]
ano_1997 <- filter(chicago, year == "1997")
ano_1997 <- filter(chicago, chicago$year == "1997")
View(ano_1997)
# Quantas mortes provocadas por doen¸cas cardiovasculares ocorreram no período do estudo?
total_cvd <- sum(chicago_data$cvd, na.rm = TRUE)
# Quantas mortes provocadas por doen¸cas cardiovasculares ocorreram no período do estudo?
total_cvd <- sum(chicago$cvd, na.rm = TRUE)
total_cvd
# Em qual estação ocorreram mais e menos mortes por doenças cardiovasculares?
cvd_by_season <- aggregate(cvd ~ season, data = chicago, FUN = sum, na.rm = TRUE)
cvd_by_season
# Estação com mais mortes por doenças cardiovasculares
max_cvd_season <- cvd_by_season[which.max(cvd_by_season$cvd), ]
max_cvd_season
# Estação com menos mortes por doenças cardiovasculares
min_cvd_season <- cvd_by_season[which.min(cvd_by_season$cvd), ]
min_cvd_season
ggplot(data = chicago, aes(x = time, y = temp, fill = season)) +
geom_point() +
labs(title = "Temperatura ao longo do tempo colorido por estação", x = "Tempo", y = "Temperatura (°F)") +
scale_color_manual(values = c("Spring" = "green", "Summer" = "red", "Fall" = "orange", "Winter" = "blue"))
temp_by_season <- aggregate(temp ~ season, data = chicago_data, FUN = mean, na.rm = TRUE)
temp_by_season <- aggregate(temp ~ season, data = chicago, FUN = mean, na.rm = TRUE)
temp_by_season
# Média da umidade relativa em cada uma das estações
rhum_by_season <- aggregate(rhum ~ season, data = chicago, FUN = mean, na.rm = TRUE)
rhum_by_season
# Boxplot para a variável temp em cada estação
boxplot(temp ~ season, data = chicago, main = "Boxplot da Temperatura por Estação", ylab = "Temperatura (°F)")
ggplot(data = chicago, aes(x = time, y = temp, fill = season)) +
geom_point() +
labs(title = "Temperatura ao longo do tempo colorido por estação", x = "Tempo", y = "Temperatura (°F)") +
scale_color_manual(values = c("Spring" = "green", "Summer" = "red", "Fall" = "orange", "Winter" = "blue"))
unique(chicago$season)
ggplot(data = chicago, aes(x = time, y = temp, fill = season)) +
geom_point() +
labs(title = "Temperatura ao longo do tempo colorido por estação", x = "Tempo", y = "Temperatura (°F)") +
scale_color_manual(values = c("Spring" = "green", "Summer" = "red", "Autumn " = "orange", "Winter" = "blue"))
unique(chicago$season)
ggplot(data = chicago, aes(x = time, y = temp, fill = season)) +
geom_point() +
labs(title = "Temperatura ao longo do tempo colorido por estação", x = "Tempo", y = "Temperatura (°F)") +
scale_color_manual(values = c("Autumn" = "green", "Spring" = "red", "Summer" = "orange", "Winter" = "blue"))
# letra d
chicago_data$season <- as.factor(chicago_data$season)
# letra d
chicago$season <- as.factor(chicago_data$season)
# letra d
chicago$season <- as.factor(chicago$season)
ggplot(data = chicago, aes(x = time, y = temp, fill = season)) +
geom_point() +
labs(title = "Temperatura ao longo do tempo colorido por estação", x = "Tempo", y = "Temperatura (°F)") +
scale_color_manual(values = c("Autumn" = "green", "Spring" = "red", "Summer" = "orange", "Winter" = "blue"))
ggplot(chicago_data, aes(x = time, y = temp, color = season)) +
geom_point() +
labs(title = "Temperatura ao longo do tempo colorido por estação",
x = "Tempo", y = "Temperatura (°F)") +
scale_color_manual(values = c("Spring" = "green", "Summer" = "red", "Fall" = "orange", "Winter" = "blue"))
ggplot(chicago, aes(x = time, y = temp, color = season)) +
geom_point() +
labs(title = "Temperatura ao longo do tempo colorido por estação",
x = "Tempo", y = "Temperatura (°F)") +
scale_color_manual(values = c("Spring" = "green", "Summer" = "red", "Fall" = "orange", "Winter" = "blue"))
ggplot(data = chicago, aes(x = time, y = temp, fill = season)) +
geom_point() +
labs(title = "Temperatura ao longo do tempo colorido por estação", x = "Tempo", y = "Temperatura (°F)") +
scale_color_manual(values = c("Autumn" = "green", "Spring" = "red", "Summer" = "orange", "Winter" = "blue"))
ggplot(chicago, aes(x = time, y = temp, color = season)) +
geom_point() +
labs(title = "Temperatura ao longo do tempo colorido por estação",
x = "Tempo", y = "Temperatura (°F)") +
scale_color_manual(values = c("Spring" = "green", "Summer" = "red", "Fall" = "orange", "Winter" = "blue"))
ggplot(chicago, aes(x = time, y = temp, color = season)) +
geom_point() +
labs(title = "Temperatura ao longo do tempo colorido por estação",
x = "Tempo", y = "Temperatura (°F)") +
scale_color_manual(values = c("Spring" = "green", "Summer" = "red", "Autumn" = "orange", "Winter" = "blue"))
papagaio <- read.table("papagaio.txt", header = TRUE)
papagaio <- read.table("papagaio.txt", sep = ",", header = TRUE)
View)()
View(papagaio)
head(papagaio_data)
head(papagaio)
tail(papagaio)
str(papagaio)
summary(papagaio)
# Gráfico de barras para a quantidade de aves por espécie
ggplot(papagaio, aes(x = especie)) +
geom_bar() +
labs(title = "Quantidade de Papagaios-do-Mar por Espécie",
x = "Espécie", y = "Quantidade")
# Gráfico de barras para a quantidade de aves por espécie
ggplot(papagaio, aes(x = especie, fill = "blue")) +
geom_bar() +
labs(title = "Quantidade de Papagaios-do-Mar por Espécie",
x = "Espécie", y = "Quantidade")
# Gráfico de barras para a quantidade de aves por espécie
ggplot(papagaio, aes(x = especie)) +
geom_bar(fill = "lightyellow") +
labs(title = "Quantidade de Papagaios-do-Mar por Espécie",
x = "Espécie", y = "Quantidade")
ggplot(dados_arquivo, aes(x = LocalDaMorte)) +
geom_bar(fill = "lightyellow") +
labs(x = "Local da Morte")
# Gráfico de barras para a quantidade de aves por espécie
ggplot(papagaio, aes(x = especie)) +
geom_bar(fill = "yellow") +
labs(title = "Quantidade de Papagaios-do-Mar por Espécie",
x = "Espécie", y = "Quantidade")
install.packages("rpart")
arvore_modelo <- rpart(especie ~ peso + tamanho + envergadura, data = papagaio_data)
arvore_modelo <- rpart(especie ~ peso + tamanho + envergadura, data = papagaio)
arvore_modelo <- rpart(especie ~ peso + tamanho + envergadura, data = papagaio)
library(rpart)
# Criar a árvore de decisão
arvore_modelo <- rpart(especie ~ peso + tamanho + envergadura, data = papagaio)
# Exibir a árvore
print(arvore_modelo)
# Previsões usando o modelo
previsoes_arvore <- predict(arvore_modelo, papagaio, type = "class")
# Calcular a taxa de acerto
taxa_acerto_arvore <- mean(previsoes_arvore == papagaio_data$especie)
arvore_modelo <- rpart(especie ~ peso + tamanho + envergadura, data = papagaio)
# Exibir a árvore
print(arvore_modelo)
# Previsões usando o modelo
previsoes_arvore <- predict(arvore_modelo, papagaio, type = "class")
# Calcular a taxa de acerto
taxa_acerto_arvore <- mean(previsoes_arvore == papagaio$especie)
taxa_acerto_arvore
install.packages("class")
library(class)
# Preparar os dados para o KNN (removendo a coluna 'especie' para usar como preditora)
dados_treino <- papagaio_data[, c("peso", "tamanho", "envergadura")]
especies_treino <- papagaio_data$especie
# Aplicar KNN (k = 3, por exemplo)
previsoes_knn <- knn(train = dados_treino, test = dados_treino, cl = especies_treino, k = 3)
# Calcular a taxa de acerto do KNN
taxa_acerto_knn <- mean(previsoes_knn == papagaio_data$especie)
# Preparar os dados para o KNN (removendo a coluna 'especie' para usar como preditora)
dados_treino <- papagaio[, c("peso", "tamanho", "envergadura")]
especies_treino <- papagaio$especie
# Aplicar KNN (k = 3, por exemplo)
previsoes_knn <- knn(train = dados_treino, test = dados_treino, cl = especies_treino, k = 3)
# Calcular a taxa de acerto do KNN
taxa_acerto_knn <- mean(previsoes_knn == papagaio$especie)
taxa_acerto_knn
